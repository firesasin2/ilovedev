"use strict";(self.webpackChunkACRA_Point_V3_Education=self.webpackChunkACRA_Point_V3_Education||[]).push([[2632],{801:(r,n,e)=>{e.r(n),e.d(n,{assets:()=>d,contentTitle:()=>l,default:()=>m,frontMatter:()=>t,metadata:()=>a,toc:()=>s});var o=e(5893),i=e(1151);const t={},l="Manager",a={type:"mdx",permalink:"/ilovedev/wauth/manager",source:"@site/src/pages/wauth/manager.md",title:"Manager",description:"AdminManager",frontMatter:{},unlisted:!1},d={},s=[{value:"AdminManager",id:"adminmanager",level:3},{value:"manager.List()",id:"managerlist",level:3},{value:"manager.Update()",id:"managerupdate",level:3},{value:"manager.Delete()",id:"managerdelete",level:3}];function c(r){const n={code:"code",h1:"h1",h3:"h3",li:"li",p:"p",pre:"pre",ul:"ul",...(0,i.a)(),...r.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.h1,{id:"manager",children:"Manager"}),"\n",(0,o.jsx)("br",{}),"\n",(0,o.jsx)(n.h3,{id:"adminmanager",children:"AdminManager"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:["\uad6c\uc870\uccb4 (AdminManager\ub294 \uad6c\uc870\uccb4)","\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-go",children:"package adminmanager // package \uc774\ub984 \uc815\uc758(main\uc774 \uc544\ub2d8)\r\n\r\ntype AdminManager struct {\r\n    Log *tool.Logging\r\n\r\n    Admins sync.Map\r\n    AESKey string\r\n    Mutex  sync.RWMutex\r\n\r\n    client        *libmongo.MongoClient\r\n    Admin         *mongo.Collection //admin  \uceec\ub799\uc158\r\n    TimeClass     *mongo.Collection //read-only\r\n    adminrole     *mongo.Collection //read-only\r\n    TokenPolicy   *mongo.Collection //read-only\r\n    NodeClassTree *mongo.Collection //read-only\r\n    NodeClass     *mongo.Collection //read-only\r\n}\n"})}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["\uc120\uc5b8","\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-go",children:'adminMgr, err = adminmanager.New(ctx, logging, client, AESKey)\r\nif err != nil {\r\n\tlogging.Fatalln(err)\r\n}\r\n\r\nfunc New(ctx context.Context, l *tool.Logging, client *libmongo.MongoClient, AESKey string) (*AdminManager, error) {\r\n\r\n    manager, err := NewAdminManager(ctx, l, client, AESKey)\r\n    if err != nil {\r\n        l.Errorln(err)\r\n        return nil, err\r\n    }\r\n\r\n    return manager, nil\r\n}\r\n\r\nfunc NewAdminManager(ctx context.Context, l *tool.Logging, client *libmongo.MongoClient, AESKey string) (*AdminManager, error) {\r\n    m := AdminManager{\r\n        Log:    l,\r\n        AESKey: AESKey,\r\n    }\r\n\r\n    m.client = client\r\n    m.Admin = client.Database.Collection("admin")\r\n    m.TimeClass = client.Database.Collection("timeclass")         //read-only\r\n    m.adminrole = client.Database.Collection("adminrole")         //read-only\r\n    m.TokenPolicy = client.Database.Collection("tokenpolicy")     //read-only\r\n    m.NodeClassTree = client.Database.Collection("nodeclasstree") //read-only\r\n    m.NodeClass = client.Database.Collection("nodeclass")         //read-only\r\n\r\n    return &m, nil\r\n}\n'})}),"\n"]}),"\n"]}),"\n",(0,o.jsx)("br",{}),"\n",(0,o.jsx)(n.h3,{id:"managerlist",children:"manager.List()"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:["List \ud568\uc218 \ud638\ucd9c","\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-go",children:"people, err := adminMgr.List(r.Context(), query, fields, sort, max)\r\nif err != nil {\r\n\tlogging.Errorln(err)\r\n}\n"})}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["List \ud568\uc218","\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-go",children:'func (m *AdminManager) List(ctx context.Context, query string, fields string, sort string, max int64) ([]info.Admin, error) {\r\n    admins := []info.Admin{}\r\n\r\n    // query: ID icontain "apadmin"\r\n    f, err := filter.ConvertFilter(query)\r\n    if err != nil {\r\n        m.Log.Errorln(err)\r\n        return []info.Admin{}, tool.ErrorStack("E_AGFT_0001")\r\n    }\r\n    // f: map[ID:map[$options:i $regex:apadmin]]\r\n\r\n    projection, err := filter.ConvertFields(fields)\r\n    if err != nil {\r\n        m.Log.Errorln(err)\r\n        return []info.Admin{}, tool.ErrorStack(err, "E_DEFT_0000")\r\n    }\r\n\r\n    order, err := filter.ConvertSort(sort)\r\n    if err != nil {\r\n        m.Log.Errorln(err)\r\n        return []info.Admin{}, tool.ErrorStack(err, "E_AGFT_0001")\r\n    }\r\n\r\n    // max\uac00 0\uc774\uba74, \ubaa8\ub450 \uc870\ud68c\r\n    opt := options.Find().SetLimit(max)\r\n    opt = opt.SetProjection(projection)\r\n    if len(order) > 0 {\r\n        opt = opt.SetSort(order)\r\n    }\r\n\r\n    cursor, err := m.Admin.Find(ctx, f, opt)\r\n    if err != nil {\r\n        m.Log.Errorln(err)\r\n        return []info.Admin{}, tool.ErrorStack(err, "E_DEFT_0000")\r\n    }\r\n    defer cursor.Close(ctx)\r\n\r\n    err = cursor.All(ctx, &admins)\r\n    if err != nil {\r\n        m.Log.Errorln(err)\r\n        return []info.Admin{}, tool.ErrorStack(err, "E_DEFT_0000")\r\n    }\r\n\r\n    // \uad00\ub9ac\uc790 \uc5ed\ud560 \uc774\ub984\uacfc \uacb0\ud569(join)\r\n    for i := 0; i < len(admins); i++ {\r\n        if len(admins[i].AdminRole_ID) == 0 {\r\n            continue\r\n        }\r\n\r\n        role, err := m.\uad00\ub9ac\uc790\uc5ed\ud560\uad6c\ud558\uae30(admins[i].AdminRole_ID)\r\n        if err != nil {\r\n            m.Log.Errorln(err)\r\n            continue\r\n        }\r\n        admins[i].AdminRole_Name = role.Name\r\n    }\r\n\r\n    return admins, nil\r\n}\n'})}),"\n"]}),"\n"]}),"\n",(0,o.jsx)("br",{}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:["Create \ud568\uc218","\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-go",children:'func (m *AdminManager) Create(ctx context.Context, person info.Admin, Regulation string) (error) {\r\n    var err error\r\n\r\n    // \uac80\uc0ac: \ube44\ubc00\ubc88\ud638\uac00 \uc5c6\uc73c\uba74 \uc624\ub958\r\n    if len(person.Password) <= 0 {\r\n        err = fmt.Errorf("\uc0dd\uc131\uc2dc \ube44\ubc00\ubc88\ud638 empty")\r\n        return tool.ErrorStack(err, "E_ADMN_0020")\r\n    }\r\n\r\n    // \uac80\uc0ac: \uc544\uc774\ub514\ub294 \ud544\uc218\r\n    if len(person.ID) <= 0 {\r\n        err = fmt.Errorf("\uc544\uc774\ub514\ub294 \ud544\uc218")\r\n        return tool.ErrorStack(err, "E_TPOL_0001")\r\n    }\r\n\r\n    // \uac80\uc0ac: \uc544\uc774\ub514 \ud55c\uae00\uc0ac\uc6a9 \ubd88\uac00\r\n    if tool.IsKoreanString(person.ID) {\r\n        err = fmt.Errorf("\uc544\uc774\ub514\ub294 \ud55c\uae00\uc0ac\uc6a9 \ubd88\uac00")\r\n        return tool.ErrorStack(err, "E_ADMN_0030")\r\n    }\r\n\r\n    // \uac80\uc0ac: \uc544\uc774\ub514\ub294 \ubb38\uc790\uc640 \uc22b\uc790\ub9cc \uac00\ub2a5\r\n    for _, char := range person.ID {\r\n        if !unicode.IsLetter(char) && !unicode.IsNumber(char) {\r\n            err = fmt.Errorf("\uc544\uc774\ub514\ub294 \ubb38\uc790\uc640 \uc22b\uc790\ub9cc \uac00\ub2a5")\r\n            return tool.ErrorStack(err, "E_VLPW_0027")\r\n        }\r\n    }\r\n\r\n    // \uac80\uc0ac: \uc544\uc774\ub514\ub294 255\uc790\ub9ac \uc81c\ud55c\r\n    if len(person.ID) >= 255 {\r\n        err = fmt.Errorf("\uc544\uc774\ub514\ub294 255\uc790\ub9ac \uc774\uc0c1 \uae08\uc9c0")\r\n        return tool.ErrorStack(err, "E_ADMN_0031")\r\n    }\r\n\r\n    // \uac80\uc0ac: \ud574\ub2f9 ID\uac00 \uc774\ubbf8 \uc788\ub2e4\uba74 \uc624\ub958\r\n    existPerson, err := m.Get(ctx, person.ID)\r\n    if err == nil {\r\n        if existPerson.ID == person.ID {\r\n            err = fmt.Errorf("\ud574\ub2f9 ID\uc758 \uc0ac\uc6a9\uc790\uac00 \uc774\ubbf8 \uc874\uc7ac\ud569\ub2c8\ub2e4.")\r\n            return tool.ErrorStack("E_ADMN_0001")\r\n        }\r\n    }\r\n\r\n    // \ub85c\uc9c1: \ube44\ubc00\ubc88\ud638 \uc554\ud638\ud654\r\n    if len(person.Password) > 0 {\r\n        hash, err := tool.Pbkdf2Hash64([]byte(person.Password))\r\n        if err != nil {\r\n            m.Log.Errorln(err)\r\n            return tool.ErrorStack(err, "E_DEFT_0000")\r\n        }\r\n        person.Password = hash\r\n    }\r\n\r\n    if len(person.OfflineSecret) > 0 {\r\n        offsecret, err := tool.AES256CTREncryptAndEncodeBase64(libconfigkey.GetAESKeyOnce(ctx, m.Log, m.client), []byte(person.OfflineSecret))\r\n        if err != nil {\r\n            m.Log.Errorln(err)\r\n            return tool.ErrorStack(err, "E_DEFT_0000")\r\n        }\r\n        person.OfflineSecret = offsecret\r\n    }\r\n\r\n    if len(person.OnlineSecret) > 0 {\r\n        onsecret, err := tool.AES256CTREncryptAndEncodeBase64(libconfigkey.GetAESKeyOnce(ctx, m.Log, m.client), []byte(person.OnlineSecret))\r\n        if err != nil {\r\n            m.Log.Errorln(err)\r\n            return tool.ErrorStack(err, "E_DEFT_0000")\r\n        }\r\n        person.OnlineSecret = onsecret\r\n    }\r\n\r\n    // \ub85c\uc9c1: \uc720\ud6a8\ud55c ip\uc778\uc9c0 \uac80\uc0ac\r\n    err = CheckIPAddress(person.IPAddresses, Regulation)\r\n    if err != nil {\r\n        return err\r\n    }\r\n\r\n    // \ucd08\uae30\uac12: \uc2e0\uaddc\uc0dd\uc131\uc2dc \ubb34\uc870\uac74 \uac15\uc81c\uc554\ud638\ubcc0\uacbd \uc124\uc815\uc744 ON \uc2dc\ud0a8\ub2e4\r\n    person.ForceChangePwd = bool(info.PERSON_NEED_CHANGE_PASSWORD)\r\n\r\n    // \ucd08\uae30\uac12: \uc0dd\uc131 \uc2dc\uac04\r\n    person.CreateTimestamp = time.Now().Unix()\r\n\r\n    m.Mutex.Lock()\r\n    defer m.Mutex.Unlock()\r\n\r\n    _, err = m.Admin.InsertOne(ctx, person)\r\n    if err != nil {\r\n        m.Log.Errorln(err)\r\n        return tool.ErrorStack(err, "E_DEFT_0000")\r\n    }\r\n\r\n    return nil\r\n}\n'})}),"\n"]}),"\n"]}),"\n",(0,o.jsx)("br",{}),"\n",(0,o.jsx)(n.h3,{id:"managerupdate",children:"manager.Update()"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:["Update \ud568\uc218 \ud638\ucd9c","\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-go",children:"  err := adminMgr.Update(r.Context(), req, true)\r\n  if err != nil {\r\n  \tlogging.Errorln(err)\r\n  }\n"})}),"\n"]}),"\n"]}),"\n",(0,o.jsx)("br",{}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:["Update \ud568\uc218","\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-go",children:'  func (m *AdminManager) Update(ctx context.Context, admin info.Admin, onlyUpdateTag bool) (info.Admin, info.Admin, error) {\r\n\r\n      m.Mutex.Lock()\r\n      defer m.Mutex.Unlock()\r\n\r\n      oldAdmin := info.Admin{}\r\n      err := m.Admin.FindOne(ctx, bson.M{"ID": admin.ID}).Decode(&oldAdmin)\r\n      if err != nil {\r\n          m.Log.Errorln(err)\r\n          return info.Admin{}, info.Admin{}, tool.ErrorStack(err, "E_DEFT_0000")\r\n      }\r\n\r\n      newAdmin := oldAdmin\r\n\r\n      syncAttributes := []string{}\r\n      if onlyUpdateTag {\r\n          // \ub85c\uc9c1: update\uac00 \uc788\ub294 \uc18d\uc131\ub4e4 \uc774\ub984\uc744 \uac00\uc838\uc635\ub2c8\ub2e4.\r\n          syncAttributes, err = tool.GetAttributesName(info.Admin{}, "update", true)\r\n          if err != nil {\r\n              return info.Admin{}, info.Admin{}, tool.ErrorStack(err, "E_DEFT_0000")\r\n          }\r\n      } else {\r\n          // \ub85c\uc9c1: \ubaa8\ub4e0 \uc18d\uc131\ub4e4 \uc774\ub984\uc744 \uac00\uc838\uc635\ub2c8\ub2e4.\r\n          t := reflect.TypeOf(info.Admin{})\r\n          for i := 0; i < t.NumField(); i++ {\r\n              syncAttributes = append(syncAttributes, t.Field(i).Name)\r\n          }\r\n      }\r\n\r\n      // \ub85c\uc9c1: \ub3d9\uae30\ud654 \ud560 \uc18d\uc131\ub4e4\uc758 \uac12\uc744 newAdmin\uc5d0 \ub123\uc2b5\ub2c8\ub2e4.\r\n      for _, syncAttribute := range syncAttributes {\r\n          r := reflect.ValueOf(admin)\r\n          f := reflect.Indirect(r).FieldByName(syncAttribute)\r\n\r\n          tool.SetValueToStruct(&newAdmin, syncAttribute, f)\r\n      }\r\n\r\n      // newAdmin\ub97c bson.M\uc73c\ub85c \ubcc0\ud658\r\n      newAdminBson := bson.M{}\r\n      v := reflect.ValueOf(newAdmin)\r\n      for i := 0; i < v.NumField(); i++ {\r\n          newAdminBson[v.Type().Field(i).Name] = v.Field(i).Interface()\r\n      }\r\n\r\n      // \ub85c\uc9c1: \uc5c5\ub370\uc774\ud2b8\r\n      result, err := m.Admin.UpdateOne(ctx, bson.M{"ID": admin.ID}, bson.M{"$set": newAdminBson})\r\n      if err != nil {\r\n          m.Log.Errorln(err)\r\n          return info.Admin{}, info.Admin{}, tool.ErrorStack(err, "E_DEFT_0000")\r\n      }\r\n\r\n      return oldAdmin, newAdmin, nil\r\n  }\n'})}),"\n"]}),"\n"]}),"\n",(0,o.jsx)("br",{}),"\n",(0,o.jsx)(n.h3,{id:"managerdelete",children:"manager.Delete()"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsx)(n.p,{children:"Delete \ud568\uc218 \ud638\ucd9c"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-go",children:"err := adminMgr.Delete(r.Context(), req.ID)\r\nif err != nil {\r\n\tlogging.Errorln(err)\r\n}\n"})}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsx)(n.p,{children:"Delete \ud568\uc218"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-go",children:'func (m *AdminManager) Delete(ctx context.Context, id string) (info.Admin, info.Admin, error) {\r\n\r\n    m.Mutex.Lock()\r\n    defer m.Mutex.Unlock()\r\n\r\n    oldAdmin := info.Admin{}\r\n    err := m.Admin.FindOne(ctx, bson.M{"ID": id}).Decode(&oldAdmin)\r\n    if err != nil {\r\n        m.Log.Errorln(err)\r\n        return info.Admin{}, info.Admin{}, tool.ErrorStack(err, "E_DEFT_0000")\r\n    }\r\n\r\n    // \ub85c\uc9c1: \ud544\uc218\ud56d\ubaa9\uc740 \uc870\uc791 \uc81c\ud55c\r\n    if oldAdmin.Mandantory {\r\n        return info.Admin{}, info.Admin{}, tool.ErrorStack(err, "E_DEFT_0003")\r\n    }\r\n\r\n    // DB\uc5d0\uc11c \uc0ac\uc6a9\uc790 \uc0ad\uc81c\r\n    r, err := m.Admin.DeleteOne(ctx, bson.M{"ID": id})\r\n    if err != nil {\r\n        m.Log.Errorln(err)\r\n        return info.Admin{}, info.Admin{}, err\r\n    }\r\n\r\n    return oldAdmin, info.Admin{}, nil\r\n}\n'})}),"\n"]}),"\n"]})]})}function m(r={}){const{wrapper:n}={...(0,i.a)(),...r.components};return n?(0,o.jsx)(n,{...r,children:(0,o.jsx)(c,{...r})}):c(r)}},1151:(r,n,e)=>{e.d(n,{Z:()=>a,a:()=>l});var o=e(7294);const i={},t=o.createContext(i);function l(r){const n=o.useContext(t);return o.useMemo((function(){return"function"==typeof r?r(n):{...n,...r}}),[n,r])}function a(r){let n;return n=r.disableParentContext?"function"==typeof r.components?r.components(i):r.components||i:l(r.components),o.createElement(t.Provider,{value:n},r.children)}}}]);